[{"name":"app.R","content":"require(magrittr)\nrequire(ggplot2)\nrequire(shinyBS)\n\napply_theme <- function(plot_object) {\n  # this was adopted from the ggthemr package, palette 'earth'\n  plot_object <- plot_object +\n    theme(panel.background = element_rect(fill = \"#36312C\"),\n          legend.background = element_rect(fill = \"#36312C\",\n                                           colour = \"#36312C\"),\n          legend.key = element_rect(fill = \"#36312C\"),\n          legend.title = element_text(color = \"white\"),\n          legend.text = element_text(color = \"white\"),\n          axis.text.x = element_text(color = \"white\"),\n          axis.text.y = element_text(color = \"white\"),\n          axis.title.x = element_text(color = \"white\"),\n          axis.title.y = element_text(color = \"white\"),\n          panel.grid = element_line(color = \"#504940\"))\n  return(plot_object)\n}\n\n\n\nui <- fluidPage(\n  theme = shinythemes::shinytheme(\"slate\"),\n  shinyWidgets::chooseSliderSkin(skin = \"Flat\", color = \"#37312c\"),\n  tags$head(\n    tags$style(HTML(\"\n      .myclass pre {\n        color: white;\n        background-color: #272b30;\n        font-family: arial;\n        border-color: #272b30;\n      }\")),\n    tags$style(HTML(\"\n    .tabbable > .nav > li > a                  {background-color: #272b30;  color:white; border-style: none; font-size: 0.8em}\n    .tabbable > .nav > li[class=active]    > a {background-color: #3e444c; color:white; border-style: none;}\n  \")),\n  tags$style(\"[type = 'number'] { font-size:0.7em;height:50px;}\"),\n  tags$style(type = 'text/css', \".irs-grid-text { font-size: 5pt; color: white}\"),\n  tags$style(type = \"text/css\", \".irs {max-width: 200px; max-height: 50px; }\"),\n  tags$style(type = \"text/css\", \".form-control {max-width: 100px; max-height: 20px; }\"),\n\n  tags$style(type = \"text/css\", \".form-group {max-width: 20px; max-height: 70px}\"),\n  tags$style(type = \"text/css\", \".control-label {font-size: 0.8em; color: white}\"),\n  tags$style(type = \"text/css\", \".checkbox {font-size: 0.8em; color: white}\"),\n  tags$style(type = \"text/css\", \".selectize-control {font-size: 0.8em; max-width: 100px; max-height: 30px}\")\n  ),\n\n  titlePanel(\"\"),\n  sidebarLayout(\n    sidebarPanel(position = \"left\",\n                 tabsetPanel(type = \"tabs\", id = \"tabs_settings\",\n                             tabPanel(\"Main\", value = 1,\n                                      conditionalPanel(condition = \"input.tabs1==1\",\n                                                       sliderInput(inputId = 'init_pop_size_1',\n                                                                   label = \"Initial Population Size\",\n                                                                   value = 100, min = 2, max = 1000),\n                                                       shinyBS::bsTooltip('init_pop_size_1',\n                                                                 \"Population size at the start of the simulation\"),\n\n                                                       sliderInput(inputId = 'num_gen_simple',\n                                                                   label = \"Number of Generations\",\n                                                                   value = 20, min = 2, max = 100),\n                                                       shinyBS::bsTooltip('num_gen_simple',\n                                                                          \"Total number of generations simulated\"),\n\n                                                       sliderInput(inputId = 'put',\n                                                                   label = 'Putting individuals',\n                                                                   value = 0, min = 0, max = 100),\n                                                       shinyBS::bsTooltip('put',\n                                                                          \"Number of individuals added per generation\"),\n\n                                                       sliderInput(inputId = 'pull',\n                                                                   label = 'Pulling individuals',\n                                                                   value = 0, min = 0, max = 100),\n                                                       shinyBS::bsTooltip('pull',\n                                                                          \"Number of individuals removed per generation\"),\n\n                                                       sliderInput(inputId = 'init_frac_simple',\n                                                                   label = 'Starting fraction of focal ancestry',\n                                                                   value = 0.5, min = 0, max = 1),\n                                                       shinyBS::bsTooltip('init_frac_simple',\n                                                                          \"Initial frequency of focal ancestry\"),\n\n                                                       selectInput(inputId = \"density_model\",\n                                                                   label = \"Density dependence: \",\n                                                                   choices = c(\"Weak\", \"Strong\", \"Manual\")),\n                                                       shinyBS::bsTooltip(\"density_model\",\n                                                                          \"The user can pick between two pre-defined parameter sets that implement weak or strong density dependence. Alternatively the user can modify parameters manually in the corresponding tab.\"),\n\n                                                       checkboxInput(inputId = \"model_used_single\",\n                                                                     label = \"Use explicit recombination\",\n                                                                     value = FALSE),\n                                                       shinyBS::bsTooltip(\"model_used_single\",\n                                                                          \"When unchecked, a simplified genetic model is used. When checked, explicit recombination is modeled\"),\n                                                       downloadButton(\"download_gen1\", label = \"Download Genetics\"),\n                                                       shinyBS::bsTooltip(\"download_gen1\",\n                                                                          \"Download local ancestry information of the last generation as a tibble\"),\n                                                       downloadButton(\"download_res1\", label = \"Download results\"),\n                                                       shinyBS::bsTooltip(\"download_res1\",\n                                                                          \"Download results as text file\")\n                                      ),\n                                      conditionalPanel(condition = \"input.tabs1==3\",\n                                                       sliderInput(inputId = 'init_pop_size_3',\n                                                                   label = \"Initial Population Size\",\n                                                                   value = 100, min = 2, max = 1000),\n                                                       shinyBS::bsTooltip(\"init_pop_size_3\",\n                                                                          \"Population size at the start of the simulation\"),\n\n                                                       sliderInput(inputId = 'num_gen_optim_s',\n                                                                   label = \"Number of Generations\",\n                                                                   value = 20, min = 2, max = 100),\n                                                       shinyBS::bsTooltip(\"num_gen_optim_s\",\n                                                                          \"Total number of generations simulated\"),\n\n                                                       sliderInput(inputId = 'init_frac_optim',\n                                                                   label = 'Starting frequency of focal Ancestry',\n                                                                   value = 0.8, min = 0, max = 1),\n                                                       shinyBS::bsTooltip('init_frac_optim',\n                                                                          \"Initial frequency of focal ancestry\"),\n\n                                                       selectInput(\"density_model_2\", \"Density dependence:\",\n                                                                   c(\"Weak\", \"Strong\", \"Manual\")),\n                                                       shinyBS::bsTooltip(\"density_model_2\",\n                                                                          \"The user can pick between two pre-defined parameter sets that implement weak or strong density dependence. Alternatively the user can modify parameters manually in the corresponding tab.\"),\n\n                                                       checkboxGroupInput(\"optim_choice\",\n                                                                          label = \"Optimize\",\n                                                                          choices = list(\"Put\",\n                                                                                         \"Pull\"),\n                                                                          selected = \"Put\"),\n                                                       shinyBS::bsTooltip(\"optim_choice\",\n                                                                          \"Should only putting be optimized, only pulling, or both?\"),\n\n                                                       checkboxInput(\"model_used_s\",\n                                                                     \"Use explicit recombination\",\n                                                                     value = FALSE),\n                                                       shinyBS::bsTooltip(\"model_used_s\",\n                                                                          \"When unchecked, a simplified genetic model is used. When checked, explicit recombination is modeled\"),\n                                                       downloadButton(\"download_gen2\", label = \"Download Genetics\"),\n                                                       shinyBS::bsTooltip(\"download_gen2\",\n                                                                          \"Download local ancestry information of the last generation as a tibble\"),\n                                                       downloadButton(\"download_res2\", label = \"Download results\"),\n                                                       shinyBS::bsTooltip(\"download_res2\",\n                                                                          \"Download results as text file\")\n\n                                      ),\n                                      conditionalPanel(condition = \"input.tabs1==4\",\n                                                       sliderInput(inputId = 'init_pop_size_4',\n                                                                   label = \"Initial Population Size\",\n                                                                   value = 100, min = 2, max = 1000),\n                                                       shinyBS::bsTooltip('init_pop_size_4',\n                                                                          \"Population size at the start of the simulation\"),\n\n                                                       sliderInput(inputId = 'num_gen_optim_c',\n                                                                   label = \"Number of Generations\",\n                                                                   value = 20, min = 2, max = 100),\n                                                       shinyBS::bsTooltip(\"num_gen_optim_c\",\n                                                                          \"Total number of generations simulated\"),\n\n                                                       sliderInput(inputId = 'total_put',\n                                                                   label = 'Put: Total number of individuals',\n                                                                   value = 100, min = 0, max = 1000),\n                                                       shinyBS::bsTooltip('total_put',\n                                                                          \"Total number of individuals added, summed over all generations\"),\n\n                                                       sliderInput(inputId = 'total_pull',\n                                                                   label = 'Pull: Total number of individuals',\n                                                                   value = 100, min = 0, max = 1000),\n                                                       shinyBS::bsTooltip('total_pull',\n                                                                          \"Total number of individuals removed, summed over all generations\"),\n\n                                                       sliderInput(inputId = 'init_frac_optim_complex',\n                                                                   label = 'Starting fraction of focal Ancestry',\n                                                                   value = 0.8, min = 0, max = 1),\n                                                       shinyBS::bsTooltip('init_frac_optim_complex',\n                                                                          \"Initial frequency of focal ancestry\"),\n\n                                                       selectInput(\"density_model_3\",\n                                                                   \"Density dependence:\",\n                                                                   c(\"Weak\", \"Strong\", \"Manual\")),\n                                                       shinyBS::bsTooltip(\"density_model_3\",\n                                                                          \"The user can pick between two pre-defined parameter sets that implement weak or strong density dependence. Alternatively the user can modify parameters manually in the corresponding tab.\"),\n                                                       checkboxInput(\"model_used_c\",\n                                                                     \"Use explicit recombination\",\n                                                                     value = FALSE),\n                                                       shinyBS::bsTooltip(\"model_used_c\",\n                                                                          \"When unchecked, a simplified genetic model is used. When checked, explicit recombination is modeled\"),\n                                                       downloadButton(\"download_gen3\",\n                                                                      label = \"Download Genetics\"),\n                                                       shinyBS::bsTooltip(\"download_gen3\",\n                                                                          \"Download local ancestry information of the last generation as a tibble\"),\n                                                       downloadButton(\"download_res3\",\n                                                                      label = \"Download results\"),\n                                                       shinyBS::bsTooltip(\"download_res3\",\n                                                                          \"Download results as text file\")\n\n                                      )\n                             ),\n                             tabPanel(\"Advanced\", value = 2,\n                              fluidRow(\n                                column(5,\n                                      numericInput(inputId = 'K',\n                                                   label = \"Carrying Capacity of ecosystem\",\n                                                   value = 400, min = 2, max = 1000, step = 50),\n                                      shinyBS::bsTooltip(\"K\",\n                                                         \"Carrying Capacity of the ecosystem, e.g. the maximum number of individuals that can be sustained by the ecosystem\"),\n\n                                      numericInput(inputId = 'f_n_r',\n                                                   label = \"Breeding Risk Female\",\n                                                   value = 0.2, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"f_n_r\",\n                                                         \"Breeding risk for females, caused by for instance increased predation in defending offspring\"),\n\n                                      numericInput(inputId = 'm_n_r',\n                                                   label = \"Breeding Risk Male\",\n                                                   value = 0.0, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"m_n_r\",\n                                                         \"Breeding risk for males, caused by for instance increased predation in defending offspring\"),\n\n                                      numericInput(inputId = 'nest_succes_rate',\n                                                   label = \"Reproduction Succes Rate\",\n                                                   value = 0.387, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"nest_succes_rate\",\n                                                         \"Success rate of producing offspring per mating\"),\n\n                                      numericInput(inputId = 'morgan',\n                                                   label = \"Size of Genome (in Morgan)\",\n                                                   value = 1.0, min = 0, max = 3, step = 0.1),\n                                      shinyBS::bsTooltip(\"morgan\",\n                                                         \"Size of the modeled chromosome in Morgan, this influences the expected number of crossover events per meiosis.\"),\n\n                                      numericInput(inputId = 'num_repl',\n                                                   label = \"Number of replicates\",\n                                                   value = 1, min = 1, max = 10, step = 1),\n                                      shinyBS::bsTooltip(\"num_repl\",\n                                                         \"Multiple replicates using different random seeds are shown\"),\n\n                                      numericInput(inputId = 'max_age',\n                                                   label = \"Maximum Age\",\n                                                   value = 6, min = 1, max = 20, step = 1),\n                                      shinyBS::bsTooltip(\"max_age\",\n                                                         \"Maximum age an individual can obtain. This is modeled as a hard upper limit that individuals can not exceed. This is mainly usefull to avoid individuals with extreme old-age.\"),\n\n                                      numericInput(inputId = 'clutch_size',\n                                                   label = \"Number of offspring\",\n                                                   value = 6, min = 1, max = 20, step = 1),\n                                      shinyBS::bsTooltip(\"clutch_size\",\n                                                         \"Total number of offspring generated per mated female\"),\n\n                                      numericInput(inputId = 'clutch_sd',\n                                                   label = \"SD Number of Offspring\",\n                                                   value = 1, min = 0, max = 2, step = 0.1),\n                                      shinyBS::bsTooltip(\"clutch_sd\",\n                                                         \"Standard deviation of number of offspring generated per mated female\"),\n                                  ),\n                                column(5,\n                                      numericInput(inputId = 'sex_ratio_put',\n                                                   label = \"Sex Ratio of Put individuals (males / females)\",\n                                                   value = 0.5, min = 0, max = 1, step = 0.05),\n                                      shinyBS::bsTooltip(\"sex_ratio_put\",\n                                                         \"Sex ratio of individuals added, where values > 0.5 indicate a male biased sex ratio, and values < 0.5 indicate a female biased sex ratio\"),\n\n                                      numericInput(inputId = 'sex_ratio_pull',\n                                                   label = \"Sex Ratio of Pulled individuals (males / females)\",\n                                                   value = 0.5, min = 0, max = 1, step = 0.05),\n                                      shinyBS::bsTooltip(\"sex_ratio_pull\",\n                                                         \"Sex ratio of individuals removed, where values > 0.5 indicate a male biased sex ratio, and values < 0.5 indicate a female biased sex ratio\"),\n\n                                      numericInput(inputId = 'sex_ratio_offspring',\n                                                   label = \"Sex Ratio of offspring (males / females)\",\n                                                   value = 0.5, min = 0, max = 1, step = 0.05),\n                                      shinyBS::bsTooltip(\"sex_ratio_offspring\",\n                                                         \"Sex ratio of born offspring, where values > 0.5 indicate a male biased sex ratio, and values < 0.5 indicate a female biased sex ratio\"),\n\n                                      numericInput(inputId = 'target_frequency',\n                                                   label = \"Target Frequency (used in optimization)\",\n                                                   value = 0.999, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"target_frequency\",\n                                                         \"The optimizer tries to optimize pull and or put to reach this frequency after the set number of generations.\"),\n\n                                      numericInput(inputId = 'ancestry_put',\n                                                   label = \"Ancestry of put individuals\",\n                                                   value = 1.0, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"ancestry_put\",\n                                                         \"Ancestry of individuals used for putting\"),\n\n                                      numericInput(inputId = 'ancestry_pull',\n                                                   label = \"Maximum ancestry of pulled individuals\",\n                                                   value = 1.0, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"ancestry_pull\",\n                                                         \"Maximum ancestry of individuals used for pulling\"),\n\n                                      numericInput(inputId = 'extra_pair_copulation',\n                                                   label = \"Probability of extra pair copulation\",\n                                                   value = 0.0, min = 0, max = 1, step = 0.01),\n                                      shinyBS::bsTooltip(\"extra_pair_copulation\",\n                                                         \"Probability per offspring to be the result of an extra pair copulation\"),\n                                      checkboxInput(\"random_mating\",\n                                                    \"Use random mating\",\n                                                    value = FALSE),\n                                      shinyBS::bsTooltip(\"random_mating\",\n                                                         \"When unchecked, females bond with a single male (if available), when checked, females randomly select a male, potentially causing some males to mate multiple times\")\n\n                                )\n                             )),\n                             tabPanel(\"Density Dependence\", value = 3,\n                                      numericInput(inputId = 'smin',\n                                                   label = \"Minimum Survival Rate\",\n                                                   value = 0.5, min = 0, max = 1, step = 0.05),\n                                      shinyBS::bsTooltip(\"smin\",\n                                                         \"Minimum survival rate, e.g. the survival rate even at extremely high densities does not drop below this value\"),\n\n                                      numericInput(inputId = 'smax',\n                                                   label = \"Maximum Survival Rate\",\n                                                   value = 0.9, min = 0, max = 1, step = 0.05),\n                                      shinyBS::bsTooltip(\"smax\",\n                                                         \"Maximum survival rate, e.g. the survival rate even at extremely low densities does not exceed this value\"),\n\n                                      numericInput(inputId = 'b',\n                                                   label = \"Steepness Survival curve\",\n                                                   value = -2, min = -3, max = 0, step = 0.05),\n                                      shinyBS::bsTooltip(\"b\",\n                                                         \"Steepness of the survival curve, where negative values indicate decreasing survival with increasing density, and positive values indicate increasing survival with density (this typically causes the simulation to grind to a halt, because it drives population explosion, and should be avoided).\"),\n\n\n                                      numericInput(inputId = 'p',\n                                                   label = \"Density of maximum steepness Survival curve\",\n                                                   value = 0.5, min = 0, max = 2, step = 0.05),\n                                      shinyBS::bsTooltip(\"p\",\n                                                         \"Density at which the survival curve shows maximum steepness, or in other words, density at which survival is exactly (smax + smin) / 2\"),\n\n                             )\n                 )\n    ),\n    mainPanel(\"\",\n              tabsetPanel(type = \"tabs\", id = \"tabs1\",\n                          tabPanel(\"Simulation\", value = 1,\n                                   plotOutput(\"simple_plots\")),\n                          tabPanel(\"Static Optimization\", value = 3,\n                                   plotOutput('Optim_simple_plots'),\n                                   div(class = \"myclass\",\n                                       verbatimTextOutput(\"selected_var\"))\n                          ),\n                          tabPanel(\"Adaptive Optimization\", value = 4,\n                                   plotOutput('Optim_complex_plots'),\n                                   div(class = \"myclass\",\n                                       verbatimTextOutput(\"complex_text_output\")\n                                   ))\n              )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n\n  simple_data <- reactive({\n    simRestore::simulate_policy(initial_population_size = input$init_pop_size_1,\n                                reproduction_success_rate = input$nest_succes_rate,\n                                reproductive_risk = c(input$f_n_r, input$m_n_r),\n                                num_generations = input$num_gen_simple,\n                                K = input$K,\n                                pull = input$pull,\n                                put = input$put,\n                                num_replicates  = input$num_repl,\n                                starting_freq = input$init_frac_simple,\n                                morgan = input$morgan,\n                                max_age = input$max_age,\n                                mean_number_of_offspring = input$clutch_size,\n                                sd_number_of_offspring = input$clutch_sd,\n                                genetic_model =\n                                  ifelse(input$model_used_single == 1,\n                                                       \"junctions\",\n                                                       \"point\"),\n                                smin = ifelse(input$density_model == \"Manual\",\n                                              input$smin, 0.5),\n                                smax = ifelse(input$density_model == \"Manual\",\n                                              input$smax, 0.9),\n                                b = ifelse(input$density_model == \"Manual\",\n                                           input$b,\n                                           ifelse(input$density_model == \"Strong\",\n                                                  -5, -2)),\n                             p = ifelse(input$density_model == \"Manual\",\n                                        input$p,\n                                        ifelse(input$density_model == \"Strong\",\n                                               0.45, 0.5)),\n                                sex_ratio_put = input$sex_ratio_put,\n                                sex_ratio_pull = input$sex_ratio_pull,\n                                sex_ratio_offspring = input$sex_ratio_offspring,\n                                ancestry_put = input$ancestry_put,\n                                ancestry_pull = input$ancestry_pull,\n                                extra_pair_copulation = input$extra_pair_copulation,\n                                random_mating = input$random_mating,\n                                return_genetics = TRUE)\n    })\n\n  output$simple_plots <- renderPlot({\n    to_plot <- simple_data()\n    data_storage <<- to_plot\n\n    p1 <- to_plot$results %>%\n      ggplot(aes(x = t, y = freq_focal_ancestry, group = replicate)) +\n      geom_line(colour = \"#ffffff\") +\n      xlab(\"Number of generations\") +\n      ylab(\"Average focal ancestry\") +\n      ylim(0, 1) +\n      theme(legend.position = \"top\")\n\n    focal_y <- 1.03 * tail(to_plot$results$freq_focal_ancestry, 1)\n    if (round(tail(to_plot$results$freq_focal_ancestry, 1), 2) >= 0.99) {\n      focal_y <- 0.95 * tail(to_plot$results$freq_focal_ancestry, 1)\n    }\n\n    p1 <- p1 +\n      annotate(\"text\", x = max(to_plot$results$t), y = focal_y,\n               label = round(tail(to_plot$results$freq_focal_ancestry, 1), 2),\n               hjust = 1,\n               colour = \"#ffffff\")\n\n    p2 <- ggplot(to_plot$results, aes(x = t,\n                                      y = num_individuals,\n                                      group = replicate)) +\n      geom_line(colour = \"#ffffff\") +\n      xlab(\"Number of generations\") +\n      ylab(\"Total number of individuals\")\n\n    p3 <- to_plot$results %>%\n      dplyr::mutate(\"Males\" = num_males) %>%\n      dplyr::mutate(\"Females\" = num_females) %>%\n      ggplot(aes(x = t, group = replicate)) +\n      geom_line(aes(y = Males, color = \"Males\")) +\n      geom_line(aes(y = Females, group = replicate, color = \"Females\")) +\n      labs(x = \"Generation\",\n           y = \"Number of individuals\",\n           color = \"Sex\") +\n      theme(legend.position = \"top\")\n\n    ## old color: #36312C\n    p1 <- apply_theme(p1)\n    p2 <- apply_theme(p2)\n    p3 <- apply_theme(p3)\n\n    egg::ggarrange(p1, p2, p3, nrow = 1)\n  } , bg = \"transparent\")\n\n  ########  OPTIMIZATION #####################################################\n\n  optim_data_static <-  reactive({\n    get_optim_data_static(initial_population_size = input$init_pop_size_3,\n                          reproduction_success_rate = input$nest_succes_rate,\n                          reproductive_risk = c(input$f_n_r, input$m_n_r),\n                          num_generations = input$num_gen_optim_s,\n                          K = input$K,\n                          num_replicates = input$num_repl,\n                          target_frequency = input$target_frequency,\n                          optim_choice = input$optim_choice,\n                          morgan = input$morgan,\n                          starting_freq = input$init_frac_optim,\n                          use_complex_model = input$model_used_s,\n                          max_age = input$max_age,\n                          mean_number_of_offspring = input$clutch_size,\n                          sd_number_of_offspring = input$clutch_sd,\n                          smin = ifelse(input$density_model_2 == \"Manual\",\n                                        input$smin, 0.5),\n                          smax = ifelse(input$density_model_2 == \"Manual\",\n                                        input$smax, 0.9),\n                          b = ifelse(input$density_model_2 == \"Manual\",\n                                     input$b,\n                                     ifelse(input$density_model_2 == \"Strong\",\n                                            -5, -2)),\n                          p = ifelse(input$density_model_2 == \"Manual\",\n                                     input$p,\n                                     ifelse(input$density_model_2 == \"Strong\",\n                                            0.45, 0.5)),\n                          sex_ratio_put = input$sex_ratio_put,\n                          sex_ratio_pull = input$sex_ratio_pull,\n                          sex_ratio_offspring = input$sex_ratio_offspring,\n                          ancestry_put = input$ancestry_put,\n                          ancestry_pull = input$ancestry_pull,\n                          extra_pair_copulation = input$extra_pair_copulation,\n                          random_mating = input$random_mating)\n  })\n\n  optim_data_complex <-  reactive({\n    get_optim_data_adaptive(initial_population_size = input$init_pop_size_4,\n                           reproduction_success_rate = input$nest_succes_rate,\n                           reproductive_risk = c(input$f_n_r, input$m_n_r),\n                           num_generations = input$num_gen_optim_c,\n                           K = input$K,\n                           num_replicates = input$num_repl,\n                           target_frequency = input$target_frequency,\n                           morgan = input$morgan,\n                           total_put = input$total_put,\n                           total_pull = input$total_pull,\n                           starting_freq = input$init_frac_optim_complex,\n                           use_complex_model = input$model_used_c,\n                           max_age = input$max_age,\n                           mean_number_of_offspring = input$clutch_size,\n                           sd_number_of_offspring = input$clutch_sd,\n                           smin = ifelse(input$density_model_3 == \"Manual\",\n                                         input$smin, 0.5),\n                           smax = ifelse(input$density_model_3 == \"Manual\",\n                                         input$smax, 0.9),\n                           b = ifelse(input$density_model_3 == \"Manual\",\n                                      input$b,\n                                      ifelse(input$density_model_3 == \"Strong\",\n                                             -5, -2)),\n                           p = ifelse(input$density_model_3 == \"Manual\",\n                                      input$p,\n                                      ifelse(input$density_model_3 == \"Strong\",\n                                             0.45, 0.5)),\n                           sex_ratio_put = input$sex_ratio_put,\n                           sex_ratio_pull = input$sex_ratio_pull,\n                           sex_ratio_offspring = input$sex_ratio_offspring,\n                           ancestry_put = input$ancestry_put,\n                           ancestry_pull = input$ancestry_pull,\n                           extra_pair_copulation = input$extra_pair_copulation,\n                           random_mating = input$random_mating)\n  })\n\n  output$Optim_simple_plots <- renderPlot({\n    to_plot <- optim_data_static()\n    data_storage <<- to_plot\n\n    final_freq <- to_plot$final_freq\n    if (is.numeric(final_freq)) {\n      final_freq <- round(to_plot$final_freq, digits = 3)\n      if (is.na(final_freq) || is.nan(final_freq)) final_freq <- 0.0\n    } else {\n      final_freq <- 0.0\n    }\n\n    for_render_text <- c()\n    for_render_text <- c(for_render_text,\n                         \" Target frequency was: \",\n                         input$target_frequency, \"\\n\")\n    for_render_text <- c(for_render_text,\n                         \" Final frequency was: \",\n                         final_freq, \"\\n\")\n\n    if (final_freq >= input$target_frequency) {\n      for_render_text <- c(for_render_text,\n                           \"Target frequency was reached\\n\")\n    } else {\n      for_render_text <- c(for_render_text,\n                           \"Target frequency was NOT reached\\n\")\n    }\n\n    if (length(input$optim_choice) == 1) {\n      if (input$optim_choice == \"Pull\") {\n        for_render_text <- c(for_render_text, \"\\n\",\n                             \"Advice is to pull \",\n                             round(to_plot$pull),\n                             \" individuals per generation\")\n      }\n      if (input$optim_choice == \"Put\") {\n        for_render_text <- c(for_render_text, \"\\n\",\n                             \"Advice is to put \",\n                             round(to_plot$put),\n                             \" individuals per generation\")\n      }\n    }\n    if (length(input$optim_choice) == 2) {\n\n      for_render_text <- c(for_render_text, \"\\n\",\n                           \"Advice is to put \",\n                           round(to_plot$put),\n                           \" individuals per generation\\n\",\n                           \"         and pull \", round(to_plot$pull),\n                           \" individuals per generation\")\n    }\n\n    output$selected_var <- renderText({ for_render_text })\n\n    p1 <- to_plot$results %>%\n      ggplot(aes(x = t, y = freq_focal_ancestry, group = replicate)) +\n      geom_line(colour = \"white\") +\n      xlab(\"Number of generations\") +\n      ylab(\"Average focal ancestry\") +\n      ylim(0, 1) +\n      theme(legend.position = \"top\")\n\n    focal_y <- 1.03 * tail(to_plot$results$freq_focal_ancestry, 1)\n    if (round(tail(to_plot$results$freq_focal_ancestry, 1), 2) >= 0.99) {\n      focal_y <- 0.95 * tail(to_plot$results$freq_focal_ancestry, 1)\n    }\n\n    p1 <- p1 +\n      annotate(\"text\", x = max(to_plot$results$t), y = focal_y,\n               label = round(tail(to_plot$results$freq_focal_ancestry, 1), 2),\n               hjust = 1,\n               colour = \"white\")\n\n    p2 <- ggplot(to_plot$results,\n                 aes(x = t, y = num_individuals, group = replicate)) +\n      geom_line(colour = \"white\") +\n      xlab(\"Number of generations\") +\n      ylab(\"Total number of individuals\")\n\n    p3 <- to_plot$results %>%\n      dplyr::mutate(\"Males\" = num_males) %>%\n      dplyr::mutate(\"Females\" = num_females) %>%\n      ggplot(aes(x = t, group = replicate)) +\n      geom_line(aes(y = Males, color = \"Males\")) +\n      geom_line(aes(y = Females, group = replicate, color = \"Females\")) +\n      labs(x = \"Generation\",\n           y = \"Number of individuals\",\n           color = \"Sex\") +\n      theme(legend.position = \"top\")\n\n    p4 <-  tidyr::gather(to_plot$curve, key = \"type\", value = \"number\", -t) %>%\n      ggplot(aes(x = t, y = number, col = type)) +\n      geom_line() +\n      ylab(\"Amount\") +\n      xlab(\"Number of Generations\") +\n      theme(legend.position = \"top\")\n\n    p1 <- apply_theme(p1)\n    p2 <- apply_theme(p2)\n    p3 <- apply_theme(p3)\n    p4 <- apply_theme(p4)\n\n    egg::ggarrange(p1, p2, p3, p4, nrow = 1)\n\n  }, bg = \"transparent\")\n\n  output$Optim_complex_plots <- renderPlot({\n    to_plot <- optim_data_complex()\n    data_storage <<- to_plot\n    for_text <- to_plot$curve\n    # tibble with t, pull, put\n\n    final_freq <- to_plot$final_freq\n\n    if (is.numeric(final_freq)) {\n      if (is.na(final_freq)) final_freq <- 0.0\n      final_freq <- round(to_plot$final_freq, digits = 3)\n    } else {\n      final_freq <- 0.0\n    }\n\n    for_render_text <- c()\n    for_render_text <- c(for_render_text,\n                         \" Target frequency was: \",\n                         input$target_frequency, \"\\n\")\n    for_render_text <- c(for_render_text,\n                         \"Final frequency was: \", final_freq, \"\\n\")\n    if (final_freq >= input$target_frequency) {\n      for_render_text <- c(for_render_text,\n                           \"Target frequency was reached\\n\")\n    } else {\n      for_render_text <- c(for_render_text,\n                           \"Target frequency was NOT reached\\n\")\n    }\n\n    for_render_text <- c(for_render_text, \"Advice:\", \"\\n\")\n    if (input$total_put > 0 && input$total_pull > 0) {\n      for_render_text <- c(for_render_text,\n                           c(\"Generation\", \"\\t\", \"Put\", \"\\t\", \"Pull\", \"\\n\"))\n    }\n    if (input$total_put == 0 && input$total_pull > 0) {\n      for_render_text <- c(for_render_text,\n                           c(\"Generation\", \"\\t\", \"Pull\", \"\\n\"))\n    }\n\n    if (input$total_put > 0 && input$total_pull == 0) {\n      for_render_text <- c(for_render_text,\n                           c(\"Generation\", \"\\t\", \"Put\", \"\\n\"))\n    }\n\n    for (i in seq_along(for_text$t)) {\n      add_text <- \"\"\n      if (input$total_put > 0 && input$total_pull > 0) {\n        add_text <- paste(round(for_text$t[i]), \"\\t\\t\\t\",\n                          round(for_text$put[i]), \"\\t\",\n                          round(for_text$pull[i]), \"\\n\")\n      }\n      if (input$total_put == 0 && input$total_pull > 0) {\n        add_text <- paste(round(for_text$t[i]), \"\\t\\t\\t\",\n                          round(for_text$pull[i]), \"\\n\")\n      }\n      if (input$total_put > 0 && input$total_pull == 0) {\n        add_text <- paste(round(for_text$t[i]), \"\\t\\t\\t\",\n                          round(for_text$put[i]), \"\\n\")\n      }\n      for_render_text <- c(for_render_text, add_text)\n    }\n\n    output$complex_text_output <- renderText({for_render_text})\n\n\n\n    p1 <- to_plot$results %>%\n      ggplot(aes(x = t, y = freq_focal_ancestry, group = replicate)) +\n      geom_line(colour = \"white\") +\n      xlab(\"Number of generations\") +\n      ylab(\"Average focal ancestry\") +\n      ylim(0, 1) +\n      theme(legend.position = \"top\")\n\n    focal_y <- 1.03 * tail(to_plot$results$freq_focal_ancestry, 1)\n\n    if (is.numeric(to_plot$results$freq_focal_ancestry)) {\n      val <- round(tail(to_plot$results$freq_focal_ancestry, 1), 2)\n    } else {\n      val <- 0.0\n    }\n\n    if (val >= 0.99) {\n      focal_y <- 0.95 * tail(to_plot$results$freq_focal_ancestry, 1)\n    }\n\n    p1 <- p1 +\n      annotate(\"text\", x = max(to_plot$results$t), y = focal_y,\n               label = val,\n               hjust = 1,\n               colour = \"white\")\n\n    p2 <- ggplot(to_plot$results, aes(x = t,\n                                      y = num_individuals,\n                                      group = replicate)) +\n      geom_line(colour = \"white\") +\n      xlab(\"Number of generations\") +\n      ylab(\"Total number of individuals\")\n\n    p3 <- to_plot$results %>%\n      dplyr::mutate(\"Males\" = num_males) %>%\n      dplyr::mutate(\"Females\" = num_females) %>%\n      ggplot(aes(x = t, group = replicate)) +\n      geom_line(aes(y = Males, color = \"Males\")) +\n      geom_line(aes(y = Females, group = replicate, color = \"Females\")) +\n      labs(x = \"Generation\",\n           y = \"Number of individuals\",\n           color = \"Sex\") +\n      theme(legend.position = \"top\")\n\n    p4 <-  tidyr::gather(to_plot$curve, key = \"type\", value = \"number\", -t) %>%\n      ggplot(aes(x = t, y = number, col = type)) +\n      geom_step() +\n      ylab(\"Amount\") +\n      xlab(\"Number of Generations\") +\n      theme(legend.position = \"top\")\n    #ggthemr::ggthemr(palette = \"earth\",\n    #                 type = \"outer\",\n    #                 spacing = 2)\n    p1 <- apply_theme(p1)\n    p2 <- apply_theme(p2)\n    p3 <- apply_theme(p3)\n    p4 <- apply_theme(p4)\n\n    egg::ggarrange(p1, p2, p3, p4, nrow = 1)\n\n  }, bg = \"transparent\")\n\n  output$download_res1 <- downloadHandler(\n    filename = function() {\n      paste0(\"dataset_\", Sys.Date(), \".txt\")\n    },\n    content = function(file) {\n      # stored_data <- read.table(input$data_for_download)\n      write.table(data_storage$results, file, quote = FALSE)\n    }\n  )\n\n  output$download_gen1 <- downloadHandler(\n    filename = function() {\n      paste0(\"genetics_\", Sys.Date(), \".txt\")\n    },\n    content = function(file) {\n      write.table(data_storage$genetics, file, quote = FALSE)\n    }\n  )\n\n  output$download_res2 <- downloadHandler(\n    filename = function() {\n      paste0(\"dataset_\", Sys.Date(), \".txt\")\n    },\n    content = function(file) {\n      # stored_data <- read.table(input$data_for_download)\n      write.table(data_storage$results, file, quote = FALSE)\n    }\n  )\n\n  output$download_gen2 <- downloadHandler(\n    filename = function() {\n      paste0(\"genetics_\", Sys.Date(), \".txt\")\n    },\n    content = function(file) {\n      write.table(data_storage$genetics, file, quote = FALSE)\n    }\n  )\n\n  output$download_res3 <- downloadHandler(\n    filename = function() {\n      paste0(\"dataset_\", Sys.Date(), \".txt\")\n    },\n    content = function(file) {\n      write.table(data_storage$results, file, quote = FALSE)\n    }\n  )\n\n  output$download_gen3 <- downloadHandler(\n    filename = function() {\n      paste0(\"genetics_\", Sys.Date(), \".txt\")\n    },\n    content = function(file) {\n      write.table(data_storage$genetics, file, quote = FALSE)\n    }\n  )\n}\n\nget_optim_data_static <- function(initial_population_size,\n                                  reproduction_success_rate,\n                                  reproductive_risk,\n                                  num_generations,\n                                  K,\n                                  num_replicates,\n                                  target_frequency,\n                                  optim_choice,\n                                  morgan,\n                                  starting_freq,\n                                  use_complex_model,\n                                  max_age,\n                                  mean_number_of_offspring,\n                                  sd_number_of_offspring,\n                                  smin,\n                                  smax,\n                                  b,\n                                  p,\n                                  sex_ratio_put,\n                                  sex_ratio_pull,\n                                  sex_ratio_offspring,\n                                  ancestry_put,\n                                  ancestry_pull,\n                                  extra_pair_copulation,\n                                  random_mating) {\n\n  opt_pull <- FALSE\n  opt_put  <- FALSE\n\n  if (length(optim_choice) == 2) {\n    opt_pull <- TRUE\n    opt_put <- TRUE\n  } else {\n    if (length(optim_choice) == 1) {\n      if (optim_choice == \"Put\") {\n        opt_put <- TRUE\n        opt_pull <- FALSE\n      }\n      if (optim_choice == \"Pull\") {\n        opt_pull <- TRUE\n        opt_put <- FALSE\n      }\n    }\n  }\n\n  res <- simRestore::optimize_static(initial_population_size =\n                                       initial_population_size,\n                                     reproduction_success_rate = reproduction_success_rate,\n                                     reproductive_risk = reproductive_risk,\n                                     num_generations = num_generations,\n                                     K = K,\n                                     num_replicates = num_replicates,\n                                     target_frequency = target_frequency,\n                                     optimize_pull = opt_pull,\n                                     optimize_put = opt_put,\n                                     morgan = morgan,\n                                     starting_freq = starting_freq,\n                                     max_age = max_age,\n                                     mean_number_of_offspring = mean_number_of_offspring,\n                                     sd_number_of_offspring = sd_number_of_offspring,\n                                     genetic_model =\n                                       ifelse(use_complex_model == TRUE,\n                                              \"junctions\",\n                                              \"point\"),\n                                     smin = smin,\n                                     smax = smax,\n                                     b = b,\n                                     p = p,\n                                     sex_ratio_put = sex_ratio_put,\n                                     sex_ratio_pull = sex_ratio_pull,\n                                     sex_ratio_offspring = sex_ratio_offspring,\n                                     ancestry_put = ancestry_put,\n                                     ancestry_pull = ancestry_pull,\n                                     extra_pair_copulation = extra_pair_copulation,\n                                     random_mating = random_mating,\n                                     verbose = FALSE,\n                                     return_genetics = TRUE)\n\n  if (is.null(res)) {\n    opt_res <- simRestore::optimize_static(target_frequency = 0.99,\n                               optimize_put = TRUE,\n                               num_generations = num_generations,\n                               starting_freq = starting_freq,\n                               initial_population_size = initial_population_size)\n    opt_res$results$freq_focal_ancestry <- 0\n    opt_res$results$freq_ancestry_males <- 0\n    opt_res$results$freq_ancestry_females <- 0\n    opt_res$results$num_individuals <- 0\n    opt_res$results$num_males <- 0\n    opt_res$results$num_females <- 0\n    opt_res$put <- 0\n    opt_res$pull <- 0\n    opt_res$final_freq <- 0\n    opt_res$curve$put <- 0\n    opt_res$curve$pull <- 0\n    res <- opt_res\n  }\n  return(res)\n}\n\nget_optim_data_adaptive <- function(initial_population_size,\n                                    reproduction_success_rate,\n                                    reproductive_risk,\n                                    num_generations,\n                                    K,\n                                    num_replicates,\n                                    target_frequency,\n                                    total_put,\n                                    total_pull,\n                                    morgan,\n                                    starting_freq,\n                                    use_complex_model,\n                                    max_age,\n                                    mean_number_of_offspring,\n                                    sd_number_of_offspring,\n                                    smin,\n                                    smax,\n                                    b,\n                                    p,\n                                    sex_ratio_put,\n                                    sex_ratio_pull,\n                                    sex_ratio_offspring,\n                                    ancestry_put,\n                                    ancestry_pull,\n                                    extra_pair_copulation,\n                                    random_mating) {\n\n  res <-\n    simRestore::optimize_adaptive(\n    initial_population_size = initial_population_size,\n    reproduction_success_rate = reproduction_success_rate,\n    reproductive_risk = reproductive_risk,\n    num_generations = num_generations,\n    K = K,\n    num_replicates = num_replicates,\n    target_frequency = target_frequency,\n    optimize_pull = total_pull,\n    optimize_put = total_put,\n    morgan = morgan,\n    starting_freq = starting_freq,\n    max_age = max_age,\n    mean_number_of_offspring = mean_number_of_offspring,\n    sd_number_of_offspring = sd_number_of_offspring,\n    genetic_model =\n      ifelse(use_complex_model == TRUE,\n             \"junctions\",\n             \"point\"),\n    smin = smin,\n    smax = smax,\n    b = b,\n    p = p,\n    sex_ratio_put = sex_ratio_put,\n    sex_ratio_pull = sex_ratio_pull,\n    sex_ratio_offspring = sex_ratio_offspring,\n    ancestry_put = ancestry_put,\n    ancestry_pull = ancestry_pull,\n    extra_pair_copulation = extra_pair_copulation,\n    random_mating = random_mating,\n    verbose = FALSE,\n    return_genetics = TRUE)\n\n  if (is.null(res)) {\n        opt_res <- simRestore::optimize_static(target_frequency = 0.99,\n                                   optimize_put = TRUE,\n                                   num_generations = num_generations,\n                                   starting_freq = starting_freq,\n                                   initial_population_size = initial_population_size)\n        opt_res$results$freq_focal_ancestry <- 0\n        opt_res$results$freq_ancestry_males <- 0\n        opt_res$results$freq_ancestry_females <- 0\n        opt_res$results$num_individuals <- 0\n        opt_res$results$num_males <- 0\n        opt_res$results$num_females <- 0\n        opt_res$put <- 0\n        opt_res$pull <- 0\n        opt_res$final_freq <- 0\n        opt_res$curve$put <- 0\n        opt_res$curve$pull <- 0\n        res <- opt_res\n  }\n\n  return(res)\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
