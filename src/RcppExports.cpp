// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_complete
List simulate_complete(int pop_size, float frequency_hawaii_organism, float sd_frequency_hawaii, NumericVector introductions, NumericVector removal, int number_of_generations, int replicates, int K, double morgan, NumericVector nesting_risk, double nest_failure_rate, int establishment_burnin, int seed, int max_age, bool use_simple, bool verbose, double clutch_size_mean, double clutch_size_sd, double smin, double smax, double p, double b, double sex_ratio_put, double sex_ratio_offspring);
RcppExport SEXP _simRestore_simulate_complete(SEXP pop_sizeSEXP, SEXP frequency_hawaii_organismSEXP, SEXP sd_frequency_hawaiiSEXP, SEXP introductionsSEXP, SEXP removalSEXP, SEXP number_of_generationsSEXP, SEXP replicatesSEXP, SEXP KSEXP, SEXP morganSEXP, SEXP nesting_riskSEXP, SEXP nest_failure_rateSEXP, SEXP establishment_burninSEXP, SEXP seedSEXP, SEXP max_ageSEXP, SEXP use_simpleSEXP, SEXP verboseSEXP, SEXP clutch_size_meanSEXP, SEXP clutch_size_sdSEXP, SEXP sminSEXP, SEXP smaxSEXP, SEXP pSEXP, SEXP bSEXP, SEXP sex_ratio_putSEXP, SEXP sex_ratio_offspringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< float >::type frequency_hawaii_organism(frequency_hawaii_organismSEXP);
    Rcpp::traits::input_parameter< float >::type sd_frequency_hawaii(sd_frequency_hawaiiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type introductions(introductionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type removal(removalSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_generations(number_of_generationsSEXP);
    Rcpp::traits::input_parameter< int >::type replicates(replicatesSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type morgan(morganSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nesting_risk(nesting_riskSEXP);
    Rcpp::traits::input_parameter< double >::type nest_failure_rate(nest_failure_rateSEXP);
    Rcpp::traits::input_parameter< int >::type establishment_burnin(establishment_burninSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< bool >::type use_simple(use_simpleSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type clutch_size_mean(clutch_size_meanSEXP);
    Rcpp::traits::input_parameter< double >::type clutch_size_sd(clutch_size_sdSEXP);
    Rcpp::traits::input_parameter< double >::type smin(sminSEXP);
    Rcpp::traits::input_parameter< double >::type smax(smaxSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sex_ratio_put(sex_ratio_putSEXP);
    Rcpp::traits::input_parameter< double >::type sex_ratio_offspring(sex_ratio_offspringSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_complete(pop_size, frequency_hawaii_organism, sd_frequency_hawaii, introductions, removal, number_of_generations, replicates, K, morgan, nesting_risk, nest_failure_rate, establishment_burnin, seed, max_age, use_simple, verbose, clutch_size_mean, clutch_size_sd, smin, smax, p, b, sex_ratio_put, sex_ratio_offspring));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simRestore_simulate_complete", (DL_FUNC) &_simRestore_simulate_complete, 24},
    {NULL, NULL, 0}
};

RcppExport void R_init_simRestore(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
